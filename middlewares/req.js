(function (_0x342c32, _0x290540) { const _0x4974ab = _0x1fa0, _0x5981c6 = _0x342c32(); while (!![]) { try { const _0xc933ec = parseInt(_0x4974ab(0xb5)) / 0x1 * (parseInt(_0x4974ab(0xd4)) / 0x2) + parseInt(_0x4974ab(0xc7)) / 0x3 + parseInt(_0x4974ab(0xcf)) / 0x4 + -parseInt(_0x4974ab(0xd3)) / 0x5 * (-parseInt(_0x4974ab(0x9a)) / 0x6) + -parseInt(_0x4974ab(0xb1)) / 0x7 * (-parseInt(_0x4974ab(0xb6)) / 0x8) + parseInt(_0x4974ab(0x9f)) / 0x9 + parseInt(_0x4974ab(0xbe)) / 0xa * (-parseInt(_0x4974ab(0xb8)) / 0xb); if (_0xc933ec === _0x290540) break; else _0x5981c6['push'](_0x5981c6['shift']()); } catch (_0x1c08b0) { _0x5981c6['push'](_0x5981c6['shift']()); } } }(_0x582a, 0xabcec)); import { existsSync, unlinkSync, readdir } from 'fs'; import { join } from 'path'; import _0x1194f1 from 'pino'; import _0x44b2f9, { makeInMemoryStore, Browsers, DisconnectReason, delay, useMultiFileAuthState, downloadMediaMessage } from '@whiskeysockets/baileys'; import { toDataURL } from 'qrcode'; import _0x13c49e from '../dirname.js'; import _0x1789a9 from '../database/dbpromise.js'; import _0x190390 from '../response.js'; import { createJsonFile, deleteFileIfExists } from '../functions/function.js'; import _0x13dd22 from 'fs'; function _0x582a() { const _0x11a462 = ['2SDOYfV', 'output', 'insertIfAbsent', 'restartRequired', 'cwd', 'endsWith', 'headersSent', 'isDirectory', 'writeToFile', 'checked', 'notify', 'reject', 'sessions', 'isLegacy', 'substring', 'Chrome', '1111812yblpaI', 'store', 'error', 'connection.update', 'log', '5701140zhZyne', 'get', 'Unable\x20to\x20create\x20QR\x20code.', 'lstatSync', 'contacts', 'set', '_store', 'values', 'has', 'loggedOut', 'bind', 'Running\x20cleanup\x20before\x20exit.', 'readFromFile', 'filter', 'logout', 'join', 'replace', 'messages.upsert', '2821XnUOsb', 'md_', 'type', 'delete', '1016849erzSmI', '1912QYplvs', '@s.whatsapp.net', '979QIwmpl', 'forEach', 'Reconnecting...', 'exists', 'readdir', 'unlinkSync', '289070yaQtJG', 'messages', 'groupMetadata', 'onWhatsApp', '.json', 'contacts.set', 'includes', 'undefined', '@g.us', '1078653xVxHjL', 'creds.update', 'sendMessage', 'chats', 'open', 'statusCode', 'warn', 'rmdirSync', '2457456FhfMBC', 'split', '/contacts/', 'default', '15NoFuhW']; _0x582a = function () { return _0x11a462; }; return _0x582a(); } import _0x47ba4f from 'path'; function _0x1fa0(_0x464689, _0x59a3ba) { const _0x582a8d = _0x582a(); return _0x1fa0 = function (_0x1fa09e, _0x458620) { _0x1fa09e = _0x1fa09e - 0x9a; let _0x320751 = _0x582a8d[_0x1fa09e]; return _0x320751; }, _0x1fa0(_0x464689, _0x59a3ba); } import { webhookWa } from '../routes/aiWaBot.js'; import { webhookWaBard } from '../routes/BardAiBot.js'; import { webhookBard } from '../routes/geminiWaBot.js'; const sessions = new Map(), retries = new Map(), sessionsDir = (_0x19d206 = '') => { const _0x3ab937 = _0x1fa0; return join(_0x13c49e, _0x3ab937(0xe0), _0x19d206 ? _0x19d206 + '.json' : ''); }, isSessionExists = _0x56a500 => { const _0x4222df = _0x1fa0; return sessions[_0x4222df(0xa7)](_0x56a500); }, isSessionFileExists = _0x24534b => { return existsSync(sessionsDir(_0x24534b)); }, shouldReconnect = _0x29390e => { const _0x3abaa4 = _0x1fa0; let _0x2e14ee = parseInt(0x5), _0x3d19b8 = retries['get'](_0x29390e) ?? 0x0; _0x2e14ee = _0x2e14ee < 0x1 ? 0x1 : _0x2e14ee; if (_0x3d19b8 < _0x2e14ee) return ++_0x3d19b8, console[_0x3abaa4(0x9e)](_0x3abaa4(0xba), { 'attempts': _0x3d19b8, 'sessionId': _0x29390e }), retries[_0x3abaa4(0xa4)](_0x29390e, _0x3d19b8), !![]; return ![]; }, createSession = async (_0x132947, _0x56170a = ![], _0x42f78f = null, _0x2b2d53) => { const _0x48614e = _0x1fa0, _0x578780 = 'md_' + _0x132947, _0xf0a02b = _0x1194f1({ 'level': _0x48614e(0xcd) }), _0x2a680c = makeInMemoryStore({ 'logger': _0xf0a02b }), { state: _0x593e49, saveCreds: _0x2a2a45 } = await useMultiFileAuthState(sessionsDir(_0x578780)), _0x309e21 = { 'auth': _0x593e49, 'printQRInTerminal': ![], 'logger': _0xf0a02b, 'browser': Browsers['ubuntu'](_0x48614e(0xe3)), 'syncFullHistory': ![] }, _0x38f42a = _0x44b2f9[_0x48614e(0xd2)](_0x309e21); !_0x56170a && (_0x2a680c[_0x48614e(0xab)](sessionsDir(_0x132947 + '_store')), _0x2a680c[_0x48614e(0xa9)](_0x38f42a['ev'])), sessions[_0x48614e(0xa4)](_0x132947, { ..._0x38f42a, 'store': _0x2a680c, 'isLegacy': _0x56170a }), _0x38f42a['ev']['on'](_0x48614e(0xc8), _0x2a2a45), _0x38f42a['ev']['on']('chats.set', ({ chats: _0x495838 }) => { const _0x5d9525 = _0x48614e; _0x56170a && _0x2a680c[_0x5d9525(0xca)][_0x5d9525(0xd6)](..._0x495838); }), _0x38f42a['ev']['on'](_0x48614e(0xc3), () => { const _0x138747 = _0x48614e; createJsonFile(_0x132947, Object[_0x138747(0xa6)](_0x2a680c[_0x138747(0xa3)])); }), _0x38f42a['ev']['on'](_0x48614e(0xb0), async _0xea224d => { const _0xbfe164 = _0x48614e, _0x432ec5 = _0xea224d[_0xbfe164(0xbf)][0x0]; !_0x432ec5['key']['fromMe'] && _0xea224d[_0xbfe164(0xb3)] === _0xbfe164(0xde) && (await delay(0x3e8), await webhookWa(_0xea224d, _0x38f42a, _0x132947), await webhookWaBard(_0xea224d, _0x38f42a, _0x132947), await webhookBard(_0xea224d, _0x38f42a, _0x132947)); }), _0x38f42a['ev']['on'](_0x48614e(0x9d), async _0x366ae1 => { const _0x21ce17 = _0x48614e, { connection: _0x324c56, lastDisconnect: _0x2383b4 } = _0x366ae1, _0x4f83e2 = _0x2383b4?.[_0x21ce17(0x9c)]?.[_0x21ce17(0xd5)]?.[_0x21ce17(0xcc)]; console[_0x21ce17(0x9e)]('message', _0x324c56); _0x324c56 === _0x21ce17(0xcb) && retries[_0x21ce17(0xb4)](_0x132947); if (_0x324c56 === 'close') { if (_0x4f83e2 === DisconnectReason[_0x21ce17(0xa8)] || !shouldReconnect(_0x132947)) return _0x42f78f && !_0x42f78f[_0x21ce17(0xda)] && _0x190390(_0x42f78f, 0x1f4, ![], 'Unable\x20to\x20create\x20session.'), deleteSession(_0x132947, _0x56170a); setTimeout(() => { createSession(_0x132947, _0x56170a, _0x42f78f); }, _0x4f83e2 === DisconnectReason[_0x21ce17(0xd7)] ? 0x0 : parseInt(0x1388)); } if (_0x366ae1['qr']) { if (_0x42f78f && !_0x42f78f['headersSent']) try { const _0x2d9ef6 = await toDataURL(_0x366ae1['qr']); _0x190390(_0x42f78f, 0xc8, !![], 'QR\x20code\x20received,\x20please\x20scan\x20the\x20QR\x20code.', { 'qr': _0x2d9ef6 }); return; } catch { _0x190390(_0x42f78f, 0x1f4, ![], _0x21ce17(0xa1)); } try { await _0x38f42a[_0x21ce17(0xad)](); } catch { } finally { deleteSession(_0x132947, _0x56170a); } } }); }, getSession = _0x30b25c => { const _0x247315 = _0x1fa0; return sessions[_0x247315(0xa0)](_0x30b25c) ?? null; }, deleteDirectory = _0x33e79d => { const _0x1023e0 = _0x1fa0; _0x13dd22['existsSync'](_0x33e79d) && (_0x13dd22['readdirSync'](_0x33e79d)['forEach'](_0x305a42 => { const _0x3fa211 = _0x1fa0, _0x3f7218 = _0x33e79d + '/' + _0x305a42; _0x13dd22[_0x3fa211(0xa2)](_0x3f7218)[_0x3fa211(0xdb)]() ? deleteDirectory(_0x3f7218) : _0x13dd22[_0x3fa211(0xbd)](_0x3f7218); }), _0x13dd22[_0x1023e0(0xce)](_0x33e79d)); }, deleteSession = async (_0x5f4b75, _0x211634 = ![]) => { const _0x157291 = _0x1fa0, _0x495ff7 = 'md_' + _0x5f4b75, _0x789c9d = _0x5f4b75 + _0x157291(0xa5); await _0x1789a9('DELETE\x20FROM\x20instance\x20WHERE\x20client_id\x20=\x20?', [_0x5f4b75]); const _0x5830f1 = process[_0x157291(0xd8)](); deleteFileIfExists(_0x5830f1 + _0x157291(0xd1) + _0x5f4b75 + _0x157291(0xc2)), isSessionFileExists(_0x495ff7) && deleteDirectory(sessionsDir(_0x495ff7)), isSessionFileExists(_0x789c9d) && unlinkSync(sessionsDir(_0x789c9d)), sessions[_0x157291(0xb4)](_0x5f4b75), retries[_0x157291(0xb4)](_0x5f4b75); }, getChatList = (_0x122474, _0x3be35d = ![]) => { const _0x425e6c = _0x1fa0, _0x4dd92e = _0x3be35d ? _0x425e6c(0xc6) : _0x425e6c(0xb7); return getSession(_0x122474)[_0x425e6c(0x9b)][_0x425e6c(0xca)][_0x425e6c(0xac)](_0x1b72a2 => { return _0x1b72a2['id']['endsWith'](_0x4dd92e); }); }, isExists = async (_0x43dd78, _0x4fd57e, _0x4d5031 = ![]) => { const _0x483d93 = _0x1fa0; try { let _0x2da725; if (_0x4d5031) return _0x2da725 = await _0x43dd78[_0x483d93(0xc0)](_0x4fd57e), Boolean(_0x2da725['id']); if (_0x43dd78[_0x483d93(0xe1)]) _0x2da725 = await _0x43dd78['onWhatsApp'](_0x4fd57e); else { ;[_0x2da725] = await _0x43dd78[_0x483d93(0xc1)](_0x4fd57e); if (typeof _0x2da725 === _0x483d93(0xc5)) { console[_0x483d93(0x9e)](_0x483d93(0xdd)); const _0x167df4 = _0x4fd57e[_0x483d93(0xaf)]('@s.whatsapp.net', '');[_0x2da725] = await _0x43dd78[_0x483d93(0xc1)]('+' + _0x167df4); } } return _0x2da725[_0x483d93(0xbb)]; } catch { return ![]; } }, sendMessage = async (_0x7e973c, _0x47589f, _0x3d5384) => { const _0x2d473e = _0x1fa0; try { return await delay(0x3e8), _0x7e973c[_0x2d473e(0xc9)](_0x47589f, _0x3d5384); } catch { return Promise['reject'](null); } }, getGroupData = async (_0x155467, _0x4a42b5) => { const _0x4f1c06 = _0x1fa0; try { const _0x5eafde = await _0x155467[_0x4f1c06(0xc0)](_0x4a42b5); return _0x5eafde; } catch { return Promise[_0x4f1c06(0xdf)](null); } }, formatPhone = _0x24d0f9 => { const _0x15c699 = _0x1fa0; if (_0x24d0f9[_0x15c699(0xd9)](_0x15c699(0xb7))) return _0x24d0f9; let _0x573cb3 = _0x24d0f9[_0x15c699(0xaf)](/\D/g, ''); return _0x573cb3 += _0x15c699(0xb7); }, formatGroup = _0x177498 => { const _0x1f4172 = _0x1fa0; if (_0x177498[_0x1f4172(0xd9)](_0x1f4172(0xc6))) return _0x177498; let _0x241ab3 = _0x177498[_0x1f4172(0xaf)](/[^\d-]/g, ''); return _0x241ab3 += _0x1f4172(0xc6); }, cleanup = () => { const _0x554021 = _0x1fa0; console['log'](_0x554021(0xaa)), sessions[_0x554021(0xb9)]((_0x7bd6f0, _0x553214) => { const _0x48f7e7 = _0x554021; !_0x7bd6f0[_0x48f7e7(0xe1)] && _0x7bd6f0[_0x48f7e7(0x9b)][_0x48f7e7(0xdc)](sessionsDir(_0x553214 + '_store')); }); }, init = () => { const _0x484ed9 = _0x1fa0, _0x1f8acb = _0x47ba4f[_0x484ed9(0xae)](_0x13c49e, _0x484ed9(0xe0)); _0x13dd22[_0x484ed9(0xbc)](_0x1f8acb, (_0x2f7bd4, _0x4b869b) => { const _0x5c838d = _0x484ed9; if (_0x2f7bd4) throw _0x2f7bd4; for (const _0x1a7151 of _0x4b869b) { if (!_0x1a7151['endsWith'](_0x5c838d(0xc2)) || !_0x1a7151['startsWith'](_0x5c838d(0xb2)) || _0x1a7151[_0x5c838d(0xc4)](_0x5c838d(0xa5))) continue; const _0x5613f7 = _0x1a7151[_0x5c838d(0xaf)]('.json', ''), _0x5a5c74 = _0x5613f7[_0x5c838d(0xd0)]('_', 0x1)[0x0] !== 'md', _0x589740 = _0x5613f7[_0x5c838d(0xe2)](_0x5a5c74 ? 0x7 : 0x3); createSession(_0x589740, _0x5a5c74); } }); }; export { isSessionExists, createSession, getSession, deleteSession, getChatList, isExists, sendMessage, formatPhone, formatGroup, cleanup, init, getGroupData, downloadMediaMessage };