const _0x5775e2 = _0xd79c; (function (_0x27bb13, _0x34debe) { const _0x2923cd = _0xd79c, _0x36c56c = _0x27bb13(); while (!![]) { try { const _0x4f2601 = -parseInt(_0x2923cd(0x112)) / 0x1 * (-parseInt(_0x2923cd(0x107)) / 0x2) + parseInt(_0x2923cd(0x126)) / 0x3 + parseInt(_0x2923cd(0xe8)) / 0x4 * (-parseInt(_0x2923cd(0x101)) / 0x5) + parseInt(_0x2923cd(0x120)) / 0x6 + -parseInt(_0x2923cd(0xf3)) / 0x7 + parseInt(_0x2923cd(0xd9)) / 0x8 * (-parseInt(_0x2923cd(0x10c)) / 0x9) + -parseInt(_0x2923cd(0xfc)) / 0xa * (-parseInt(_0x2923cd(0x103)) / 0xb); if (_0x4f2601 === _0x34debe) break; else _0x36c56c['push'](_0x36c56c['shift']()); } catch (_0x31a2d2) { _0x36c56c['push'](_0x36c56c['shift']()); } } }(_0x3043, 0x75ce8)); function _0xd79c(_0x4d690b, _0xb93e18) { const _0x304378 = _0x3043(); return _0xd79c = function (_0xd79c8f, _0xf1cf5) { _0xd79c8f = _0xd79c8f - 0xd5; let _0x37d36d = _0x304378[_0xd79c8f]; return _0x37d36d; }, _0xd79c(_0x4d690b, _0xb93e18); } import _0x1a8bb7 from 'node-fetch'; class Bard { static [_0x5775e2(0x10a)] = 'json'; static ['MD'] = _0x5775e2(0xd5);[_0x5775e2(0xf2)]; #headers; #initPromise; #bardURL = _0x5775e2(0x11e); #verbose = ![]; #fetch = _0x1a8bb7; constructor(_0x52a6fc, _0x2d0285) { const _0x2867af = _0x5775e2; if (_0x2d0285?.['verbose'] == !![]) this.#verbose = !![]; if (_0x2d0285?.[_0x2867af(0xfd)]) this.#fetch = _0x2d0285['fetch']; if (_0x52a6fc) this.#initPromise = this.#init(_0x52a6fc); else throw new Error('Please\x20provide\x20a\x20Cookie\x20when\x20initializing\x20Bard.'); this[_0x2867af(0xeb)] = _0x52a6fc; } async #init(_0x253726) { const _0x51c910 = _0x5775e2; this.#verbose && console['log'](_0x51c910(0xfe)), this.#headers = { 'Host': _0x51c910(0x102), 'X-Same-Domain': '1', 'User-Agent': _0x51c910(0x109), 'Content-Type': _0x51c910(0xe7), 'Origin': this.#bardURL, 'Referer': this.#bardURL, 'Cookie': typeof _0x253726 === _0x51c910(0xd7) ? Object['entries'](_0x253726)[_0x51c910(0xdc)](([_0x58f7f7, _0x405d4e]) => _0x58f7f7 + '=' + _0x405d4e + ';')[_0x51c910(0xe4)]('') : '__Secure-1PSID=' + _0x253726 }; let _0x4ace90; try { this.#verbose && console[_0x51c910(0x119)]('🔒\x20Authenticating\x20your\x20Google\x20account'), _0x4ace90 = await this.#fetch(this.#bardURL, { 'method': _0x51c910(0xdb), 'headers': this.#headers, 'credentials': _0x51c910(0xed) })[_0x51c910(0xe2)](_0x3deec1 => _0x3deec1[_0x51c910(0xec)]()); } catch (_0x5c0610) { throw new Error(_0x51c910(0x10f) + _0x5c0610); } try { const _0x569c21 = _0x4ace90[_0x51c910(0xd6)](/SNlM0e":"(.*?)"/)[0x1]; return this[_0x51c910(0xf2)] = _0x569c21, this.#verbose && console[_0x51c910(0x119)]('✅\x20Initialization\x20finished\x0a'), _0x569c21; } catch { throw new Error(_0x51c910(0x108)); } } async #uploadImage(_0x5ab6ba, _0x131088) { const _0x443438 = _0x5775e2; this.#verbose && console[_0x443438(0x119)](_0x443438(0x114)); let _0x21713a = _0x131088[_0x443438(0x110)], _0x36054c = [encodeURIComponent(_0x443438(0x11b)) + '=' + encodeURIComponent([_0x5ab6ba])]; try { this.#verbose && console['log'](_0x443438(0xde)); let _0x4e32e0 = await this.#fetch(_0x443438(0x121), { 'method': 'POST', 'headers': { 'X-Goog-Upload-Command': _0x443438(0xee), 'X-Goog-Upload-Protocol': _0x443438(0x113), 'X-Goog-Upload-Header-Content-Length': _0x21713a, 'X-Tenant-Id': 'bard-storage', 'Push-Id': _0x443438(0xda) }, 'body': _0x36054c, 'credentials': _0x443438(0xed) }); const _0x2142f3 = _0x4e32e0[_0x443438(0xf1)][_0x443438(0xdf)](_0x443438(0xe0)); this.#verbose && console[_0x443438(0x119)](_0x443438(0xf6)), _0x4e32e0 = await this.#fetch(_0x2142f3, { 'method': _0x443438(0x117), 'headers': { 'X-Goog-Upload-Command': _0x443438(0x100), 'X-Goog-Upload-Offset': 0x0, 'X-Tenant-Id': _0x443438(0xf7) }, 'body': _0x131088, 'credentials': _0x443438(0xed) }); const _0x3d6bf7 = await _0x4e32e0[_0x443438(0xec)](); return this.#verbose && console[_0x443438(0x119)](_0x443438(0x116)), _0x3d6bf7; } catch (_0x4616ac) { throw new Error(_0x443438(0x10f) + _0x4616ac); } } async #query(_0x1d31d6, _0x28e00a) { const _0x4b80aa = _0x5775e2; let _0x27fa34 = (_0x3c27fb, _0x685f14) => { const _0x19dbdc = _0xd79c; if (!_0x685f14) return _0x3c27fb; for (let _0x190d4e of _0x685f14) { const _0x356ffb = '!' + _0x190d4e[_0x19dbdc(0x106)] + '(' + _0x190d4e[_0x19dbdc(0xea)] + ')'; _0x3c27fb = _0x3c27fb[_0x19dbdc(0xe9)](new RegExp('(?!\x5c!)\x5c[' + _0x190d4e['tag']['slice'](0x1, -0x1) + '\x5c]'), _0x356ffb); } return _0x3c27fb; }, { ids: _0x52c875, imageBuffer: _0x3f91cb } = _0x28e00a; await this.#initPromise, this.#verbose && console['log'](_0x4b80aa(0x104)); if (!this['SNlM0e']) throw new Error('Please\x20initialize\x20Bard\x20first.\x20If\x20you\x20haven\x27t\x20passed\x20in\x20your\x20Cookie\x20into\x20the\x20class,\x20run\x20Bard.init(cookie).'); this.#verbose && console[_0x4b80aa(0x119)]('🏗️\x20Building\x20Request'); const _0x24eeb9 = { 'bl': _0x4b80aa(0x122), '_reqID': _0x52c875?.[_0x4b80aa(0x127)] ?? '0', 'rt': 'c' }, _0x2ec87d = [[_0x1d31d6], null, [null, null, null]]; if (_0x3f91cb) { let _0x57382e = await this.#uploadImage(_0x4b80aa(0xf9), _0x3f91cb); _0x2ec87d[0x0][_0x4b80aa(0xf4)](0x0, null, [[[_0x57382e, 0x1], _0x4b80aa(0xf9)]]); } if (_0x52c875) { const { conversationID: _0x470c9f, responseID: _0x4e58ed, choiceID: _0x2a2da6 } = _0x52c875; _0x2ec87d[0x2] = [_0x470c9f, _0x4e58ed, _0x2a2da6]; } const _0x22eda6 = { 'f.req': JSON[_0x4b80aa(0xe3)]([null, JSON[_0x4b80aa(0xe3)](_0x2ec87d)]), 'at': this[_0x4b80aa(0xf2)] }, _0x3f2d50 = new URL(_0x4b80aa(0x10b), this.#bardURL); for (const _0x583f0f in _0x24eeb9) { _0x3f2d50['searchParams'][_0x4b80aa(0x111)](_0x583f0f, _0x24eeb9[_0x583f0f]); } const _0x16ba74 = Object[_0x4b80aa(0xe6)](_0x22eda6)[_0x4b80aa(0xdc)](([_0x127ed0, _0x2be638]) => encodeURIComponent(_0x127ed0) + '=' + encodeURIComponent(_0x2be638))[_0x4b80aa(0xe4)]('&'); this.#verbose && console[_0x4b80aa(0x119)](_0x4b80aa(0xe1)); const _0x32efe0 = await this.#fetch(_0x3f2d50[_0x4b80aa(0xdd)](), { 'method': _0x4b80aa(0x117), 'headers': this.#headers, 'body': _0x16ba74, 'credentials': _0x4b80aa(0xed) })[_0x4b80aa(0xe2)](_0x416d40 => { return _0x416d40['text'](); })[_0x4b80aa(0xe2)](_0x2cc46d => { const _0x5225b3 = _0x4b80aa; return JSON['parse'](_0x2cc46d[_0x5225b3(0xf8)]('\x0a')[0x3])[0x0][0x2]; })['then'](_0x5864bb => JSON['parse'](_0x5864bb)); this.#verbose && console[_0x4b80aa(0x119)](_0x4b80aa(0xe5)); const _0x40890b = _0x32efe0[0x4][0x0], _0x16648d = _0x40890b[0x1][0x0], _0x1af22a = _0x40890b[0x4]?.[_0x4b80aa(0xdc)](_0x1173bf => ({ 'tag': _0x1173bf[0x2], 'url': _0x1173bf[0x3][0x0][0x0], 'info': { 'raw': _0x1173bf[0x0][0x0][0x0], 'source': _0x1173bf[0x1][0x0][0x0], 'alt': _0x1173bf[0x0][0x4], 'website': _0x1173bf[0x1][0x1], 'favicon': _0x1173bf[0x1][0x3] } })) ?? []; return this.#verbose && console[_0x4b80aa(0x119)](_0x4b80aa(0x10d)), { 'content': _0x27fa34(_0x16648d, _0x1af22a), 'images': _0x1af22a, 'ids': { 'conversationID': _0x32efe0[0x1][0x0], 'responseID': _0x32efe0[0x1][0x1], 'choiceID': _0x40890b[0x0], '_reqID': String(parseInt(_0x52c875?.[_0x4b80aa(0x127)] ?? 0x0) + 0x186a0) } }; } async #parseConfig(_0x506902) { const _0x301015 = _0x5775e2; let _0x1dd5a0 = { 'useJSON': ![], 'imageBuffer': undefined, 'ids': undefined }; if (_0x506902?.['format']) switch (_0x506902['format']) { case Bard[_0x301015(0x10a)]: _0x1dd5a0[_0x301015(0x118)] = !![]; break; case Bard['MD']: _0x1dd5a0[_0x301015(0x118)] = ![]; break; default: throw new Error(_0x301015(0xfb)); }if (_0x506902?.['image']) { if (_0x506902[_0x301015(0xd8)] instanceof ArrayBuffer) _0x1dd5a0[_0x301015(0x10e)] = _0x506902[_0x301015(0xd8)]; else { if (typeof _0x506902[_0x301015(0xd8)] === _0x301015(0xff) && /\.(jpeg|jpg|png|webp)$/[_0x301015(0x115)](_0x506902[_0x301015(0xd8)])) { let _0x499b1f; try { _0x499b1f = await import('fs'); } catch { throw new Error(_0x301015(0xef)); } _0x1dd5a0[_0x301015(0x10e)] = _0x499b1f[_0x301015(0xf0)](_0x506902[_0x301015(0xd8)])[_0x301015(0xfa)]; } else throw new Error(_0x301015(0x11c)); } } if (_0x506902?.[_0x301015(0x125)]) { if (_0x506902[_0x301015(0x125)][_0x301015(0x11f)] && _0x506902[_0x301015(0x125)][_0x301015(0x11d)] && _0x506902[_0x301015(0x125)][_0x301015(0x105)] && _0x506902['ids']['_reqID']) _0x1dd5a0['ids'] = _0x506902['ids']; else throw new Error(_0x301015(0x124)); } return _0x1dd5a0; } async[_0x5775e2(0x123)](_0x41f8a4, _0x18eb9a) { const _0x9fd4ac = _0x5775e2; let { useJSON: _0x10ca4a, imageBuffer: _0x24e558, ids: _0x43e515 } = await this.#parseConfig(_0x18eb9a), _0x9365be = await this.#query(_0x41f8a4, { 'imageBuffer': _0x24e558, 'ids': _0x43e515 }); return _0x10ca4a ? _0x9365be : _0x9365be[_0x9fd4ac(0x11a)]; } [_0x5775e2(0xf5)](_0x2195b0) { const _0x210113 = _0x5775e2; let _0x2707a6 = this; class _0x5eddb2 { [_0x210113(0x125)] = _0x2195b0; async[_0x210113(0x123)](_0x573ef8, _0x186389) { const _0x28d861 = _0x210113; let { useJSON: _0x39ff92, imageBuffer: _0x39a764 } = await _0x2707a6.#parseConfig(_0x186389), _0x1ee390 = await _0x2707a6.#query(_0x573ef8, { 'imageBuffer': _0x39a764, 'ids': this[_0x28d861(0x125)] }); return this[_0x28d861(0x125)] = _0x1ee390[_0x28d861(0x125)], _0x39ff92 ? _0x1ee390 : _0x1ee390[_0x28d861(0x11a)]; } [_0x210113(0x128)]() { return this['ids']; } } return new _0x5eddb2(); } } export default Bard; function _0x3043() { const _0x5d6709 = ['🚀\x20Starting\x20intialization', 'string', 'upload,\x20finalize', '91965fWPkCS', 'bard.google.com', '2233xCFadi', '🔎\x20Starting\x20Bard\x20Query', 'choiceID', 'tag', '192902hteJZw', 'Could\x20not\x20use\x20your\x20Cookie.\x20Make\x20sure\x20that\x20you\x20copied\x20correctly\x20the\x20Cookie\x20with\x20name\x20__Secure-1PSID\x20exactly.\x20If\x20you\x20are\x20sure\x20your\x20cookie\x20is\x20correct,\x20you\x20may\x20also\x20have\x20reached\x20your\x20rate\x20limit.', 'Mozilla/5.0\x20(Windows\x20NT\x2010.0;\x20WOW64)\x20AppleWebKit/537.36\x20(KHTML,\x20like\x20Gecko)\x20Chrome/91.0.4472.114\x20Safari/537.36', 'JSON', '/_/BardChatUi/data/assistant.lamda.BardFrontendService/StreamGenerate', '99LwPAmF', '✅\x20All\x20done!\x0a', 'imageBuffer', 'Could\x20not\x20fetch\x20Google\x20Bard.\x20You\x20may\x20be\x20disconnected\x20from\x20internet:\x20', 'byteLength', 'append', '3qLTICW', 'resumable', '🖼️\x20Starting\x20image\x20processing', 'test', '✅\x20Image\x20finished\x20working\x0a', 'POST', 'useJSON', 'log', 'content', 'File\x20name', 'Provide\x20your\x20image\x20as\x20a\x20file\x20path\x20to\x20a\x20.jpeg,\x20.jpg,\x20.png,\x20or\x20.webp,\x20or\x20a\x20Buffer.', 'responseID', 'https://bard.google.com', 'conversationID', '77712XRJUOB', 'https://content-push.googleapis.com/upload/', 'boq_assistant-bard-web-server_20230711.08_p0', 'ask', 'Please\x20provide\x20the\x20IDs\x20exported\x20exactly\x20as\x20given.', 'ids', '2528541tXfMrV', '_reqID', 'export', 'markdown', 'match', 'object', 'image', '608248SEEYNc', 'feeds/mcudyrk2a4khkz', 'GET', 'map', 'toString', '💻\x20Finding\x20Google\x20server\x20destination', 'get', 'X-Goog-Upload-URL', '💭\x20Sending\x20message\x20to\x20Bard', 'then', 'stringify', 'join', '🧩\x20Parsing\x20output', 'entries', 'application/x-www-form-urlencoded;charset=UTF-8', '164ohUwPu', 'replace', 'url', 'cookie', 'text', 'include', 'start', 'Loading\x20from\x20an\x20image\x20file\x20path\x20is\x20not\x20supported\x20in\x20a\x20browser\x20environment.', 'readFileSync', 'headers', 'SNlM0e', '5418798lnOeYs', 'push', 'createChat', '📤\x20Sending\x20your\x20image', 'bard-storage', 'split', 'bard-ai_upload', 'buffer', 'Format\x20can\x20obly\x20be\x20Bard.JSON\x20for\x20JSON\x20output\x20or\x20Bard.MD\x20for\x20Markdown\x20output.', '83840PgAqzH', 'fetch']; _0x3043 = function () { return _0x5d6709; }; return _0x3043(); }